geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns') +
scale_x_date(date_breaks = '20 years', date_labels = '%Y')
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns') +
scale_x_date(date_labels = '%Y')
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns') +
scale_x_date(breaks=seq(2010, 2019, 10))
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns') +
scale_x_date(labels = date_format("%m-%Y"))
str(btc$Date)
View(btc)
btc$Date = as.Date(btc$Date)
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns') +
scale_x_date(labels = date_format("%m-%Y"))
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
p <- qacf(btc$returns, show.sig = TRUE)
install.packages(qwraps2)
install.packages(qwraps)
acf(btc$square_res, lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
install.packages("forecast")
library(forecast)
### Lag Plot ###
gglagplot(btc$returns)
### Lag Plot ###
gglagchull(btc$returns)
# qqplot residuals squares
qqnorm(btc$square_res)
qqline(btc$square_res, col='red')
# qqplot residuals squares
qqnorm(btc$square_res)
qqline(btc$square_res, col='red')
hist(btc$returns)
hist(btc$returns, breaks = 100)
curve(dnorm(x,mean=mean(btc$returns), std = std(btc$returns)), add=TRUE)
sqrt(var(btc$returns))
curve(dnorm(x,mean=mean(btc$returns), std = sqrt(var(btc$returns))), add=TRUE)
varia = sqrt(var(btc$returns))
m = mean(btc$returns)
varia
m
curve(dnorm(x,mean=m, std = varia), add=TRUE)
curve(dnorm(x,mean=m, sd = varia), add=TRUE)
hist(btc$returns, breaks = 100, density = 2)
curve(dnorm(x,mean=m, sd = varia), add=TRUE)
hist(btc$returns, breaks = 100, density = 2)
curve(dnorm(x,mean=m, sd = varia), add=TRUE)
density(btc$returns)
curve(dnorm(x,mean=m, sd = varia), add=TRUE)
density(btc$returns)
acf(abs(btc$returns), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
### Ljung-Box test ###
lag.length = 25
Box.test(btc$returns, lag=lag.length, type="Ljung-Box") # test stationary signal
library(readxl)
require(rugarch)
library(ggplot2)
library(forecast)
theme_set(theme_minimal())
require(graphics)
library("dplyr")
library("ggpubr")
btc <- na.omit(read.csv("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/R_code/BTC-USD.csv"))
spx  <- na.omit(read.csv("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/R_code/spx.csv"))
btc$returns = c(0,diff(as.matrix(log(btc['Close'])), lag =1)*100)
btc$square_res = c(btc$returns**2)
btc$Date = as.Date(btc$Date)
spx$returns = c(0,diff(as.matrix(log(spx['Close'])), lag =1)*100)
# BTC returns
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# qqplot btc
qqnorm(btc$returns)
qqline(btc$returns, col='red')
# qqplot residuals squares
qqnorm(btc$square_res)
qqline(btc$square_res, col='red')
View(btc)
btc$returns = c(0,diff(as.matrix(log(btc['Close'])), lag =1))
btc$square_res = c(btc$returns**2)
btc$Date = as.Date(btc$Date)
# BTC returns
ggplot(data = btc, mapping = aes(x = Date, y = returns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# qqplot btc
qqnorm(btc$returns)
qqline(btc$returns, col='red')
# qqplot residuals squares
qqnorm(btc$square_res)
qqline(btc$square_res, col='red')
#### AUTOCORRELATION ####
# btc returns
acf(abs(btc$returns), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
# btc returns square
acf(btc$square_res, lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
#### AUTOCORRELATION ####
# btc returns
acf(abs(btc$returns), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
# btc returns square
acf(btc$square_res, lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
#### AUTOCORRELATION ####
# btc returns
acf(abs(btc$returns), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
# btc returns square
acf(btc$square_res, lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
spx$returns = c(0,diff(as.matrix(log(spx['Close'])), lag =1)*100)
spx$returns = c(0,diff(as.matrix(log(spx['Close'])), lag =1))
# qqplot spx
qqnorm(spx$returns)
qqline(spx$returns, col='red')
spx$returns = c(0,diff(as.matrix(log(spx['Close'])), lag =1)+100)
spx$returns = c(0,diff(as.matrix(log(spx['Close'])), lag =1)*100)
# qqplot spx
qqnorm(spx$returns)
qqline(spx$returns, col='red')
library(readxl)
require(rugarch)
library(ggplot2)
library(forecast)
theme_set(theme_minimal())
require(graphics)
library("dplyr")
library("ggpubr")
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
# bitcoin prices
ggplot(data = prices, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 0))
colnames(returns) <- x <- c(names(prices))
returns$BTC = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
returns$SPX = c(0,diff(as.matrix(log(prices['S&P500'])), lag =1))
returns$BTC = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
View(btc)
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
# bitcoin prices
ggplot(data = prices, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 0))
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
returns$BTC = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
returns$SPX = c(0,diff(as.matrix(log(prices['S&P500'])), lag =1))
View(returns)
View(returns)
View(returns)
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
View(returns)
returns$BITCOIN = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
View(prices)
returns$`S&P500` = c(0,diff(as.matrix(log(prices['S&P500'])), lag =1))
View(prices)
c(names(prices))
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
for(n in x){
returns$n =  c(0,diff(as.matrix(log(prices[n])), lag =1))
}
View(returns)
n
x[1:]
x[1:end]
x[1:18]
x[2:18]
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
returns$BITCOIN = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
for(n in x[2:18]){
returns$n =  c(0,diff(as.matrix(log(prices[n])), lag =1))
}
View(returns)
n
prices[n]
log(prices[n])
as.matrix(log(prices[n]))
diff(as.matrix(log(prices[n])), lag =1)
c(0,diff(as.matrix(log(prices[n])), lag =1))
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
for(n in x[2:18]){
returns[n] =  c(0,diff(as.matrix(log(prices[n])), lag =1))
}
View(returns)
ggplot(data = prices, mapping = aes(x = date, y = BTCreturns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
returns['date'] <- prices['date']
View(returns)
ggplot(data = returns, mapping = aes(x = date, y = BTCreturns, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
ggplot(data = returns, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# qqplot btc
for(n in x[2:18]){
qqnorm(returns[n])
qqline(returns[n], col='red')
}
n
returns[n]
qqnorm(returns[n])
returns[n]
qqnorm(returns[n])
type(returns)
typeof(returns)
typeof(prices)
returns$BITCOIN
qqnorm(returns$BITCOIN)
typeof(returns$BITCOIN)
typeof(returns[BITCOIN])
typeof(returns['BITCOIN'])
as.numeric(returns['BITCOIN'])
typeof(returns['BITCOIN'])
typeof(returns$BITCOIN)
returns$BITCOIN
unlist(returns['BITCOIN'])
as.numeric(unlist(returns['BITCOIN']))
# qqplot btc
for(n in x[2:18]){
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
}
# qqplot btc
for(n in x[2:18]){
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
}
# qqplot btc
for(n in x[2:18]){
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
ggsave(paste(n,"qqplot.eps"), width = 20, height = 20, units = "cm")
}
n
paste(n,"qqplot.eps")
# qqplot btc
for(n in x[2:18]){
postscript(paste(n,"qqplot.eps"), horizontal = FALSE, onefile = FALSE, paper = "special")
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
# qqplot btc
for(n in x[2:18]){
postscript(paste(n,"qqplot.eps"), horizontal = FALSE, onefile = FALSE)
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
library(readxl)
require(rugarch)
library(ggplot2)
library(forecast)
theme_set(theme_minimal())
require(graphics)
library("dplyr")
library("ggpubr")
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
# bitcoin prices
ggplot(data = prices, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
returns$BITCOIN = c(0,diff(as.matrix(log(prices['BITCOIN'])), lag =1))
returns$`S&P500` = c(0,diff(as.matrix(log(prices['S&P500'])), lag =1))
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
for(n in x[2:18]){
returns[n] =  c(0,diff(as.matrix(log(prices[n])), lag =1))
}
returns['date'] <- prices['date']
ggplot(data = returns, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
n <- x[2]
n
paste(n,"qqplot.eps")
paste(n,"qqplot.eps", sep ="")
# qqplot btc
for(n in x[2:18]){
postscript(paste(n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE)
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
# qqplot btc
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
qqnorm(as.numeric(unlist(returns[n])))
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
# qqplot btc
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
qqnorm(as.numeric(unlist(returns[n])), main = NULL)
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
# qqplot btc
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
qqnorm(as.numeric(unlist(returns[n])), main = NULL, xlab = NULL, ylab = NULL)
qqline(as.numeric(unlist(returns[n])), col='red')
dev.off()
}
# qqplot btc
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
qqnorm(as.numeric(unlist(returns[n])), main = NULL, xlab = NULL, ylab = NULL)
qqline(as.numeric(unlist(returns[n])), col='red', xlab = NULL, ylab = NULL)
dev.off()
}
library(readxl)
require(rugarch)
library(ggplot2)
library(forecast)
theme_set(theme_minimal())
require(graphics)
library("dplyr")
library("ggpubr")
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
prices = read_excel('C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/Excelsheets/prices.xlsx')
# bitcoin prices
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTCprices.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
ggplot(data = prices, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
dev.off()
# reutrns
returns = data.frame(matrix(ncol = length(c(names(prices))) , nrow = 2165))
colnames(returns) <- x <- c(names(prices))
for(n in x[2:18]){
returns[n] =  c(0,diff(as.matrix(log(prices[n])), lag =1))
}
returns['date'] <- prices['date']
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTCreturns.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
ggplot(data = returns, mapping = aes(x = date, y = BITCOIN, group=1)) +
geom_line(color = "#00AFBB", size = 1) +
ggtitle('BTC returns')
dev.off()
# qqplot btc
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"qqplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
qqnorm(as.numeric(unlist(returns[n])), main = NA, xlab = NA, ylab = NA)
qqline(as.numeric(unlist(returns[n])), col='red', xlab = NA, ylab = NA)
dev.off()
}
### Lag Plot ###
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"lagplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
gglagchull(btc$returns, do.lines = FALSE)
dev.off()
}
### Lag Plot ###
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"lagplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
gglagchull(as.numeric(unlist(returns[n])), do.lines = FALSE)
dev.off()
}
gglagchull(as.numeric(unlist(returns['BITCOIN'])), do.lines = FALSE)
gglagchull(as.numeric(unlist(returns['BITCOIN'])), do.lines = FALSE)
gglagchull(as.numeric(unlist(returns['BITCOIN'])), do.lines = FALSE, set.lags = 1)
### Lag Plot ###
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"lagplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
gglagchull(as.numeric(unlist(returns[n])), do.lines = FALSE, set.lags = 1)
dev.off()
}
gglagchull(as.numeric(unlist(returns['BITCOIN'])), set.lags = 1)
gglagchull(as.numeric(unlist(returns['BITCOIN'])))
gglagchull(returns$BITCOIN)
gglagchull(returns$BITCOIN, set.lags = 1,  do.lines = FALSE)
lag.plot(returns$BITCOIN, lags = 1, layout = NULL, set.lags = 1:lags,
main = NULL, asp = 1,
diag = TRUE, diag.col = "gray", type = "p", oma = NULL,
ask = NULL, do.lines = (n))
lag.plot(returns$BITCOIN, lags = 1, layout = NULL, set.lags = 1,
main = NULL, asp = 1,
diag = TRUE, diag.col = "gray", type = "p", oma = NULL,
ask = NULL, do.lines = (n))
lag.plot(returns$BITCOIN, lags = 1, layout = NULL, set.lags = 1,
main = NULL, asp = 1,
diag = TRUE, diag.col = "gray", type = "p", oma = NULL,
ask = NULL, do.lines = NULL)
lag.plot(returns$BITCOIN, lags = 1, layout = NULL, set.lags = 1,
main = NULL, asp = 1,
diag = TRUE, diag.col = "gray", type = "p", oma = NULL,
ask = NULL, do.lines = NULL)
lag.plot(returns$BITCOIN, lags = 1, layout = NULL,
main = NULL, asp = 1,
diag = TRUE, diag.col = "gray", type = "p", oma = NULL,
ask = NULL, do.lines = NULL)
lag.plot(returns$BITCOIN)
dev.off()
lag.plot(returns$BITCOIN)
### Lag Plot ###
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"lagplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
gglagchull(as.numeric(unlist(returns[n])), do.lines = FALSE, set.lags = 1)
dev.off()
}
lag.plot(as.numeric(unlist(returns['BITCOIN'])))
(
dev.off()
lag.plot(as.numeric(unlist(returns['BITCOIN'])))
lag.plot(as.numeric(unlist(returns['BITCOIN'])), lag=1)
lag.plot(as.numeric(unlist(returns['BITCOIN'])), lag=1, do.lines = FALSE)
dev.off()
lag.plot(as.numeric(unlist(returns['BITCOIN'])), lag=1, do.lines = FALSE)
lag.plot(as.numeric(unlist(returns['BITCOIN'])), lag=1, diag = FALSE, do.lines = FALSE)
### Lag Plot ###
for(n in x[2:18]){
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/",n,"lagplot.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
lag.plot(as.numeric(unlist(returns[n])), lag=1, diag = FALSE, do.lines = FALSE)
dev.off()
}
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTClagplot2.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
lag.plot(as.numeric(unlist(returns[n])), lag=2, diag = FALSE, do.lines = FALSE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTClagplot2.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
lag.plot(as.numeric(unlist(returns[n])), ylab = NA, lag=2, diag = FALSE, do.lines = FALSE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTClagplot2.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
lag.plot(as.numeric(unlist(returns[n])), lag=2, diag = FALSE, do.lines = FALSE)
dev.off()
acf(abs(returns['BITCOIN']), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTCacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(abs(returns['BITCOIN']), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/SPacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(abs(returns['S&P500']), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTCacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(returns['BITCOIN'], lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/SPacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(returns['S&P500'], lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/BTCabsacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(abs(returns['BITCOIN']), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
postscript(paste("C:/Users/matte/Desktop/Master-Thesis/Master-Thesis/20190529/SPabsacf.eps", sep =""), horizontal = FALSE, onefile = FALSE, width = 4.0, height = 3.0)
acf(abs(returns['S&P500']), lag.max = NULL,
type = c("correlation", "covariance", "partial"),
plot = TRUE, na.action = na.fail, demean = TRUE)
dev.off()
lag.plot(as.numeric(unlist(returns[n])), axis = NULL, lag=2, diag = FALSE, do.lines = FALSE)
##    plot tstudent
qqnorm(as.numeric(unlist(returns[n])), main = NA, xlab = NA, ylab = NA)
qqline(as.numeric(unlist(returns[n])), distribution = dt, col='red', xlab = NA, ylab = NA)
##    plot tstudent
qqt(as.numeric(unlist(returns[n])))
